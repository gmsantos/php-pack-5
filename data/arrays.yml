category: Arrays
questions:
    -
        question: 'Which of the following is not valid syntax for creating a new array key?'
        answers:
            - {value: '$a[] = "value";', correct: false}
            - {value: '$a{} = "value";', correct: true}
            - {value: '$a[0] = "value";', correct: false}
            - {value: '$a{0} = "value";', correct: false}
            - {value: '$a[$b = 0] = "value";', correct: false}
    -
        question: 'Which of the following functions will sort an array in ascending order by value, while preserving key associations?'
        answers:
            - {value: 'asort()', correct: true}
            - {value: 'usort()', correct: false}
            - {value: 'krsort()', correct: false}
            - {value: 'ksort()', correct: false}
            - {value: 'sort()', correct: false}
    -
        question: |
                    What is the output of the following code block?
                    $a = "The quick brown fox jumped over the lazy dog.";
                    $b = array_map("strtoupper", explode(" ", $a));
                    foreach ($b as $value) {
                        print "$value ";
                    }
        answers:
            - {value: 'THE QUICK BROWN FOX JUMPED OVER THE LAZY DOG.', correct: true}
            - {value: 'A PHP Error', correct: false}
            - {value: 'Array Array Array Array Array Array Array Array Array', correct: false}
    -
        question: 'Which from the following list is not an appropriate use of an array?'
        answers:
            - {value: 'As a list', correct: false}
            - {value: 'All of these uses are valid	', correct: true}
            - {value: 'As a Lookup Table', correct: false}
            - {value: 'A Stack', correct: false}
            - {value: 'As a hash table', correct: false}
    -
        question: |
                    What is the output of this code snippet?
                    $a = array(0.001 => 'b', .1 => 'c');
                    var_dump($a);
        answers:
            - {value: 'An empty array', correct: false}
            - {value: "0.001 => 'b', .1 => c", correct: false}
            - {value: "0 => 'c'", correct: true}
            - {value: "'0.001' => 'b', '0.1' => c'", correct: false}
            - {value: 'A Syntax Error', correct: false}
    -
        question: 'Which of the following functions could be used to break a string into an array?'
        answers:
            - {value: 'array_split()', correct: false}
            - {value: 'split()', correct: true}
            - {value: 'string_split()', correct: false}
            - {value: 'preg_match_all()', correct: true}
            - {value: 'explode()', correct: true}
    -
        question: 'If you wanted a variable containing the letters A through Z, that allowed you to access each letter independently, which of the following approaches could you use?'
        answers:
            - {value: "$str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';", correct: true}
            - {value: "range('A', 'Z');", correct: true}
            - {value: 'explode("", "ABCDEFGHIJKLMNOPQRSTUVWXYZ");', correct: false}
            - {value: 'You would use the ALPHA_ARRAY constant', correct: false}
            - {value: 'None of the above', correct: false}
    -
        question: |
                    What is the output of the following code block?
                    $array = array(1 => 0, 2, 3, 4);
                    array_splice($array, 3, count($array), array_merge(array('x'), array_slice($array, 3)));
                    var_dump($array);
        answers:
            - {value: '1 => 1, 2 => 2, 3 => x, 4 => 4', correct: false}
            - {value: '0 => 1, 2 => 2, 3 => 3, 4 => 4, x => 3', correct: false}
            - {value: '0 => 0, 1 => 2, 2 => 3, 3 => x, 4 => 4', correct: true}
            - {value: '0 => x, 1 => 0, 2 => 1, 3 => 2, 4 => 3', correct: false}
            - {value: '1 => 1, 3 => x, 2 => 2, 4 => 4', correct: false}
    -
        question: 'Which function would you use to add an element to the beginning of an array?'
        answers:
            - {value: 'array_shift()', correct: false}
            - {value: 'array_push()', correct: false}
            - {value: '$array[0] = "value";', correct: false}
            - {value: 'array_unshift()', correct: true}
            - {value: 'array_pop()', correct: false}
    -
        question: |
                    Which key will not be displayed from the following code block?
                    $array = array('a' => 'John',
                                   'b' => 'Coggeshall',
                                   'c' => array('d' => 'John',
                                                'e' => 'Smith'));
                    function display($item, $key) {
                        print "$key => $item\n";
                    }
                    array_walk_recursive($array, "display");
        answers:
            - {value: 'd', correct: false}
            - {value: 'c', correct: true}
            - {value: 'b', correct: false}
            - {value: 'a', correct: false}
            - {value: 'They all will be displayed', correct: false}
    -
        question: |
                    What is the result of the following code snippet?
                    $array = array('a' => 'John',
                                   'b' => 'Coggeshall',
                                   'c' => array('d' => 'John',
                                                'e' => 'Smith'));
                    function something($array) {
                        extract($array);
                        return $c['e'];
                    }
                    print something($array);
        answers:
            - {value: 'Smith', correct: true}
            - {value: 'A PHP Warning', correct: false}
            - {value: 'Coggeshall', correct: false}
            - {value: 'NULL', correct: false}
            - {value: 'Array', correct: false}
    -
        question: |
                    What should go in the missing line ????? below to produce the output shown?
                    $array_one = array(1,2,3,4,5);
                    $array_two = array('A', 'B', 'C', 'D', 'E');

                    ?????

                    print_r($array_three);

                    Result:
                    Array
                    (
                        [5] => A
                        [4] => B
                        [3] => C
                        [2] => D
                        [1] => E
                    )
        answers:
            - {value: '$array_three = array_merge(array_reverse($array_one), $array_two);', correct: false}
            - {value: '$array_three = array_combine($array_one, $array_two);', correct: false}
            - {value: '$array_three = array_combine(array_reverse($array_one), $array_two);	', correct: true}
            - {value: '$array_three = array_merge($array_one, $array_two);', correct: false}
            - {value: '$array_three = array_reverse($array_one) + $array_two;', correct: false}
    -
        question: 'Which of the following functions are used with the internal array pointer to accomplish an action?'
        answers:
            - {value: 'key', correct: true}
            - {value: 'forward', correct: false}
            - {value: 'prev', correct: true}
            - {value: 'current', correct: true}
            - {value: 'next', correct: next}
    -
        question: |
                    Given the following array:
                    $array = array(1,1,2,3,4,4,5,6,6,6,6,3,2,2,2);
                    The fastest way to determine the total number a particular value appears in the array is to use which function?
        answers:
            - {value: 'array_total_values', correct: false}
            - {value: 'array_count_values', correct: true}
            - {value: 'A foreach loop', correct: false}
            - {value: 'count', correct: false}
            - {value: 'a for loop', correct: false}
    -
        question: 'The ____ construct is particularly useful to assign your own variable names to values within an array.'
        answers:
            - {value: 'array_get_variables', correct: false}
            - {value: 'current', correct: false}
            - {value: 'each', correct: false}
            - {value: 'import_variables', correct: false}
            - {value: 'list', correct: true}
    -
        question: | 
                    The following code snippet displays what for the resultant array?
                    $a = array(1 => 0, 3 => 2, 4 => 6);
                    $b = array(3 => 1, 4 => 3, 6 => 4);
                    print_r(array_intersect($a, $b));
        answers:
            - {value: '1 => 0', correct: false}
            - {value: '1 => 3, 3 => 1, 4 => 3', correct: false}
            - {value: '3 => 1, 3=> 2, 4 => 3, 4=> 6', correct: false}
            - {value: '1 => 0, 3 => 2, 4 => 6', correct: false}
            - {value: 'An empty Array', correct: true}
    -
        question: |
                    After performing the following operations:
                    $a = array('a', 'b', 'c');
                    $a = array_keys(array_flip($a));
                    What will be the value of $a?
        answers:
            - { value: "array('c', 'b', 'a')", correct: false }
            - { value: 'array(2, 1, 0)', correct: false }
            - { value: "array('a', 'b', 'c')", correct: true }
            - { value: 'None of the above', correct: false }
    -
        question: PHP's array functions such as array_values() can be used on an object if the object...
        answers:
            - { value: 'implements Traversable', correct: false }
            - { value: 'is an instance of ArrayObject', correct: false }
            - { value: 'implements ArrayAccess', correct: false }
            - { value: 'None of the above', correct: true }
    -
        question: |
                    Which is the most efficient way to determine if a key is present in an array, assuming the array has no
                    NULL values?
        answers:
            - { value: "in_array('key', array_keys($a))", correct: false }
            - { value: "isset($a['key'])", correct: true }
            - { value: "array_key_exists('key', $a)", correct: false }
            - { value: 'None of the above', correct: false }
    -
        question: An object can be counted with count() and sizeof() if it...
        answers:
            - { value: 'implements ArrayAccess', correct: false }
            - { value: 'has a public __count() method', correct: false }
            - { value: 'was cast to an object from an array', correct: false }
            - { value: 'None of the above', correct: true }
    -
        question: |
                    What will be the result of the following operation?
                    array_combine(array("A","B","C"), array(1,2,3));
        answers:
            - { value: 'array("A","B","C",1,2,3)', correct: false }
            - { value: 'array(1,2,3,"A","B",C")', correct: false }
            - { value: 'array("A"=>1,"B"=>2,"C"=>3)', correct: true }
            - { value: 'array(1=>"A",2=>"B",3=>"C")', correct: false }
            - { value: 'array(1,2,3)', correct: false }
    -
        question: |
                    Which of the following expressions will evaluate to a random value from an array below?
                    $array = array("Sue","Mary","John","Anna");
        answers:
            - { value: 'array_rand($array);', correct: false }
            - { value: 'array_rand($array, 1);', correct: false }
            - { value: 'shuffle($array);', correct: false }
            - { value: '$array[array_rand($array)];', correct: true }
            - { value: 'array_values($array, ARRAY_RANDOM);', correct: false }
    -
        question: What function can reverse the order of values in an array so that keys are preserved?
        answers:
            - { value: 'array_flip()', correct: false }
            - { value: 'array_reverse()', correct: true }
            - { value: 'rsort()', correct: false }
            - { value: 'krsort()', correct: false }
            - { value: 'array_multisort()', correct: false }
    -
        question: |
                    What will be the output value of the following code?
                    $array = array(1,2,3);
                    while (list(,$v) = each($array));
                    var_dump(current($array));
        answers:
            - { value: 'bool(false)', correct: true }
            - { value: 'int(3)', correct: false }
            - { value: 'int(1)', correct: false }
            - { value: 'NULL', correct: false }
            - { value: 'Array', correct: false }
    -
        question: |
                    What will be the output of the following code?
                    $a = array(0, 1, 2 => array(3, 4));
                    $a[3] = array(4, 5);
                    echo count($a, 1);
        answers:
            - { value: '4', correct: false }
            - { value: '5', correct: false }
            - { value: '8', correct: true }
            - { value: 'None of the above', correct: false }
    -
        question: |
                    Given the following array:
                    $a = array(28, 15, 77, 43);
                    Which function will remove the value 28 from $a?
        answers:
            - { value: 'array_shift()', correct: true }
            - { value: 'array_pop()', correct: false }
            - { value: 'array_pull()', correct: false }
            - { value: 'array_unshift()', correct: false }
    -
        question: The constructs for(), foreach(), and each() can all be used to iterate an object if the object...
        answers:
            - { value: 'implements ArrayAccess', correct: false }
            - { value: 'implements Iterator', correct: false }
            - { value: 'implements Iterator and ArrayAccess', correct: true }
            - { value: 'None of the above', correct: false }
    -
        question: Which of the following functions will allow identifying unique values inside an array?
        answers:
            - { value: 'array_unique_values', correct: false }
            - { value: 'array_distinct', correct: false }
            - { value: 'array_count_values', correct: true }
            - { value: 'array_intersect', correct: false }
            - { value: 'array_values', correct: false }
    -
        question: |
                    What is the output of the following code?
                    for ($i = 0; $i < 1.02; $i += 0.17) {
                    $a[$i] = $i;
                    }
                    echo count($a);
        answers:
            - { value: '0', correct: false }
            - { value: '1', correct: true }
            - { value: '2', correct: false }
            - { value: '6', correct: false }
            - { value: '7', correct: false }
    -
        question: (Type the answer) Which SPL class implements fixed-size storage?
        answers:
            - { value: 'SplFixedArray', correct: true }
            - { value: 'SplStack', correct: false }
            - { value: 'SplQueue', correct: false }
            - { value: 'SplHeap', correct: false }
    -
        question: |
                    Which interfaces could class C implement in order to allow each statement in the following code to work? (Choose 2)
                    $obj = new C();
                    foreach ($obj as $x => $y) {
                    echo $x, $y;
                    }
        answers:
            - { value: 'Iterator', correct: true }
            - { value: 'ArrayAccess', correct: false }
            - { value: 'IteratorAggregate', correct: true }
            - { value: 'ArrayObject', correct: false }
    -
        question: |
                    What is the output of the following code?
                    class Foo Implements ArrayAccess {
                        function offsetExists($k) { return true;}
                        function offsetGet($k) {return 'a';}
                        function offsetSet($k, $v) {}
                        function offsetUnset($k) {}
                    }
                    $x = new Foo();
                    echo array_key_exists('foo', $x)?'true':'false';
        answers:
            - { value: 'true', correct: false }
            - { value: 'false', correct: true }
    -
        question: |
                    What is the output of the following code?
                    class Bar {
                    private $a = 'b';
                    public $c = 'd';
                    }
                    $x = (array) new Bar();
                    echo array_key_exists('a', $x) ? 'true' : 'false'; echo '-';
                    echo array_key_exists('c', $x) ? 'true' : 'false';
        answers:
            - { value: 'false-false', correct: false }
            - { value: 'false-true', correct: true }
            - { value: 'true-false', correct: false }
            - { value: 'true-true', correct: false }
    -
        question: |
                    What is the output of the following code?
                    $a = array('a', 'b'=>'c');
                    echo property_exists((object) $a, 'a')?'true':'false'; echo '-';
                    echo property_exists((object) $a, 'b')?'true':'false';
        answers:
            - { value: 'false-false', correct: false }
            - { value: 'false-true', correct: true }
            - { value: 'true-false', correct: false }
            - { value: 'true-true', correct: false }
