category: Web Features
questions:
    -
        question: 'To destroy one variable within a PHP session you should use which method in PHP 5?'
        answers:
            - {value: 'Unset the variable in $HTTP_SESSION_VARS', correct: false}
            - {value: 'Use the session_destroy() function', correct: false}
            - {value: 'Use the session_unset() function', correct: false}
            - {value: 'unset the variable in $_SESSION using unset()', correct: true}
            - {value: 'Any of the above are acceptable in PHP 5', correct: false}
    -
        question: 'If you would like to store your session in the database, you would do which of the following?'
        answers:
            - {value: 'It requires a custom PHP extension to change the session handler', correct: false}
            - {value: 'Implement the session_set_save_handler() function', correct: false}
            - {value: 'Create functions for each session handling step and use session_set_save_handler() to override PHP''s internal settings', correct: true}
            - {value: 'Configure the session.save_handler INI directive to your session class', correct: false}
    -
        question: 'To destroy a PHP session completely, one must which of the following?'
        answers:
            - {value: 'Regenerate the session ID using session_regenerate_id()', correct: false}
            - {value: 'If cookies are used, destroy it', correct: true}
            - {value: 'Use session_demolish() to completely destroy the session', correct: false}
            - {value: 'Change the session name using session_name()', correct: false}
            - {value: 'Destroy the session data using session_destroy()', correct: true}
    -
        question: 'If you would like to change the session ID generation function, which of the following is the best approach for PHP 5?'
        answers:
            - {value: 'Set the session.hash_function INI configuration directive', correct: true}
            - {value: 'Use the session_set_id_generator() function', correct: false}
            - {value: 'Set the session id by force using the session_id() function', correct: false}
            - {value: 'Use the session_regenerate_id() function', correct: false}
            - {value: 'Implement a custom session handler', correct: false}
    -
        question: | 
                    Consider the following HTML fragement:
                    <select name="?????" multiple>
                    <option value="1">Item #1</option>
                    <!-- ... more options ... -->
                    </select>
                    Which of the following name attributes should be used to capture all of the data from the user in PHP?
        answers:
            - {value: 'myselectbox=array()', correct: false}
            - {value: 'myselectbox[]', correct: true}
            - {value: 'myselectbox[''multiple'']', correct: false}
            - {value: 'myselectbox{''multiple''}', correct: false}
            - {value: 'myselectbox', correct: false}
    -
        question: 'When uploading a file using HTTP, which variable can be used to locate the file on PHP''s local filesystem?'
        answers:
            - {value: '$_FILES[''fieldname''][''tmp_name'']', correct: true}
            - {value: '$_FILES[''fieldname'']', correct: false}
            - {value: '$_FILES[''fieldname''][0][''filename'']', correct: false}
            - {value: '$_FILES[''fieldname''][''filename'']', correct: false}
            - {value: 'None of the above', correct: false}
    -
        question: 'To force a user to redirect to a new URL from within a PHP 5 script, which of the following should be used?'
        answers:
            - {value: 'Send a HTTP "Location:" header', correct: true}
            - {value: 'Use the HTML <redirect> Tag', correct: false}
            - {value: 'Send a HTTP "Forward:" header', correct: false}
            - {value: 'Use the redirect() function', correct: false}
    -
        question: 'Setting a cookie on the client in PHP 5 can be best accomplished by:'
        answers:
            - {value: 'Use the add_cookie() function', correct: false}
            - {value: 'Use the setcookie() function', correct: true}
            - {value: 'Use the the apache_send_header() function', correct: false}
            - {value: 'Setting a variable in the $_COOKIE superglobal', correct: false}
    -
        question: 'How does one create a cookie which will exist only until the browser session is terminated?'
        answers:
            - {value: 'You cannot create cookies that expire when the browser session is terminated', correct: false}
            - {value: 'Setting the expiration time for a cookie to a time in the distant future', correct: false}
            - {value: 'Do not provide a cookie expiration time', correct: true}
            - {value: 'Enable Cookie Security', correct: false}
            - {value: 'Set a cookie without a domain', correct: false}
    -
        question: 'Setting a HTTP cookie on the client which is not URL-encoded is done how in PHP 5?'
        answers:
            - {value: 'Use the setrawcookie() function', correct: true}
            - {value: 'Set the cookies.urlencode INI directive to false', correct: false}
            - {value: 'Use urldecode() on the return value of setcookie()', correct: false}
            - {value: 'Setting the $no_encode parameter of setcookie() to a boolean ''true''', correct: false}
            - {value: 'All cookies must be URL encoded', correct: false}
    -
        question: 'During an HTTP authentication, how does one determine the username and password provided by the browser?'
        answers:
            - {value: 'Parse the HTTP headers manually using http_get_headers()', correct: false}
            - {value: 'Use the get_http_username() and get_http_password() functions', correct: false}
            - {value: 'Use the $_SERVER[''HTTP_USER''] and $_SERVER[''HTTP_PASSWORD''] variables', correct: false}
            - {value: 'Use the $_SERVER[''PHP_AUTH_USER''] and $_SERVER[''PHP_AUTH_PW''] variables', correct: true}
            - {value: 'Parse the $_SERVER[''REQUEST_URI''] variable', correct: false}
    -
        question: | 
                    Consider the following function:
                    function redirect($url) {
                        // Check to make sure we haven't already sent
                        // the header:
                        if(/*???????*/) {
                            header("Location: $url");
                        }
                    }
                    What conditional should replace the ????? above?
        answers:
            - {value: '!in_array("Location: $url", headers_list())', correct: true}
            - {value: '!header_exists("Location: $url")', correct: false}
            - {value: '!header_location($url)', correct: false}
            - {value: ' $_SERVER[''HTTP_LOCATION''] != $url', correct: false}
    -
        question: 'One can ensure that headers can always be sent from a PHP script by doing what?'
        answers:
            - {value: 'Enable header buffering in PHP 5', correct: false}
            - {value: 'Set the header.force INI directive to true', correct: false}
            - {value: 'Enable output buffering in PHP 5', correct: true}
            - {value: 'There is no way to ensure that headers can always be set, they must always be checked', correct: false}
            - {value: 'None of the above', correct: false}
    -
        question: 'Which of the following is not a valid fopen() access mode:'
        answers:
            - {value: 'b', correct: true}
            - {value: 'x', correct: false}
            - {value: 'a', correct: false}
            - {value: 'w', correct: false}
            - {value: 'r+', correct: false}
    -
        question: 'What super-global should be used to access information about uploaded files via a POST request?'
        answers:
            - { value: '$_SERVER', correct: false }
            - { value: '$_ENV', correct: false }
            - { value: '$_POST', correct: false }
            - { value: '$_FILES', correct: true }
            - { value: '$_GET', correct: false }
    -
        question: 'What information can be used to reliably determine the type of an uploaded file?'
        answers:
            - { value: 'MIME type', correct: false }
            - { value: 'File name extension', correct: false }
            - { value: 'Contents of the file', correct: true }
    -
        question: 'Which MIME type is always sent by a client if a JPEG file is uploaded via HTTP?'
        answers:
            - { value: 'image/jpeg', correct: false }
            - { value: 'image/jpg', correct: false }
            - { value: 'image/pjpeg', correct: false }
            - { value: 'Depends on the client system', correct: true }
    -
        question: |
                    Your application uses PHP to accept and process file uploads. It fails to upload a file that is 5 MB in size,
                    although upload_max_filesize is set to "10M". Which of the following configurations could be responsible for
                    this outcome? (Choose 2)
        answers:
            - { value: 'The PHP configuration option post_max_size is set to a value that is too small', correct: true }
            - { value: 'The web server is using an incorrect encoding as part of the HTTP response sent to the client', correct: false }
            - { value: 'The browser uses an incorrect encoding as part of the HTTP request sent to the server', correct: false }
            - { value: 'The hidden form field MAX_FILE_SIZE was set to a value that is too small', correct: true }
            - { value: 'PHP cannot process file uploads larger than 4 MB', correct: false }
    -
        question: 'Which of the following PHP functions can be used to set the HTTP response code? (Choose 2)'
        answers:
            - { value: 'header_add()', correct: false }
            - { value: 'header()', correct: true }
            - { value: 'http_set_status()', correct: false }
            - { value: 'http_response_code()', correct: true }
            - { value: 'http_header_set()', correct: false }
    -
        question: 'What is the name of the header used to require HTTP authentication?'
        answers:
            - { value: 'Authorization-Required', correct: false }
            - { value: 'WWW-Authenticate', correct: true }
            - { value: 'HTTP-Authenticate', correct: false }
            - { value: 'Authentication-Required', correct: false }
            - { value: 'HTTP-Auth', correct: false }
    -
        question: 'What types of HTTP authentication are supported by PHP? (Choose 2)'
        answers:
            - { value: 'Basic', correct: true }
            - { value: 'Advanced', correct: false }
            - { value: 'Strict', correct: false }
            - { value: 'Digest', correct: true }
            - { value: 'Realm', correct: false }
    -
        question: |
                    Which of the following items in the $_SERVER superglobal are important for authenticating the client when
                    using HTTP Basic authentication? (Choose 2)
        answers:
            - { value: 'PHP_AUTH_TYPE', correct: false }
            - { value: 'PHP_AUTH_PASSWORD', correct: false }
            - { value: 'PHP_AUTH_DIGEST', correct: false }
            - { value: 'PHP_AUTH_PW', correct: true }
            - { value: 'PHP_AUTH_USER', correct: false }
    -
        question: |
                    When tracking upload progress with sessions, the values of 2 INI settings are needed to determine the key
                    in $_SESSION of the upload progress data. What are the INI settings? (Choose 2)
        answers:
            - { value: 'session.upload_progress.file', correct: false }
            - { value: 'session.upload_progress.key', correct: false }
            - { value: 'session.upload_progress.prefix', correct: true }
            - { value: 'session.upload_progress.freq', correct: false }
            - { value: 'session.upload_progress.name', correct: false }
    -
        question: |
                    What is the name of the function that allows you register a set of functions that implement user- defined
                    session handling?
        answers:
            - { value: 'session_set_handler()', correct: false }
            - { value: 'session_set_storage_handler()', correct: false }
            - { value: 'session_register_handler()', correct: false }
            - { value: 'session_set_save_handler()', correct: true }
    -
        question: 'When a browser requests an image identified by an img tag, it never sends a Cookie header.'
        answers:
            - { value: 'TRUE', correct: false }
            - { value: 'FALSE', correct: true }
    -
        question: 'Which of the following techniques ensures that a value submitted in a form can only be yes or no ?'
        answers:
            - { value: 'Use a select list that only lets the user choose between yes and no .', correct: false }
            - { value: 'Use a hidden input field that has a value of yes or no .', correct: false }
            - { value: 'Enable the safe_mode configuration directive.', correct: false }
            - { value: 'None of the above.', correct: true }
    -
        question: 'Which of the following superglobals does not necessarily contain data from the client?'
        answers:
            - { value: '$_POST', correct: false }
            - { value: '$_SESSION', correct: true }
            - { value: '$_GET', correct: false }
            - { value: '$_SERVER', correct: false }
    -
        question: 'You want to parse a URL into its single parts. Which function do you choose?'
        answers:
            - { value: 'parse_url()', correct: true }
            - { value: 'url_parse()', correct: false }
            - { value: 'get_url_parts()', correct: false }
            - { value: 'geturlparts()', correct: false }
    -
        question: |
                    Given the default PHP configuration, how can all of the parameters provided via GET be accessed in a
                    form of a string?
        answers:
            - { value: "$_GET['ALL']", correct: false }
            - { value: "$_SERVER['QUERY']", correct: false }
            - { value: "$_SERVER['QUERY_STRING']", correct: true }
            - { value: "$_ENV['QUERY']", correct: false }
            - { value: "$QUERY_STRING", correct: false }
    -
        question: |
                    An HTML form contains this form element:
                    <input type="file" name="myFile" />
                    When this form is submitted, the following PHP code gets executed:
                    move_uploaded_file(
                      $_FILES['myFile']['tmp_name'],
                      'uploads/' . $_FILES['myFile']['name']
                    );
                    Which of the following actions must be taken before this code may go into production? (Choose 2)
        answers:
            - { value: "Check with is_uploaded_file() whether the uploaded file $_FILES['myFile']['tmp_name'] is valid", correct: false }
            - { value: "Sanitize the file name in $_FILES['myFile']['name'] because this value is not consistent among web browsers", correct: true }
            - { value: 'Check the charset encoding of the HTTP request to see whether it matches the encoding of the uploaded file', correct: false }
            - { value: "Sanitize the file name in $_FILES['myFile']['name'] because this value could be forged", correct: true }
            - { value: 'Use $HTTP_POST_FILES instead of $_FILES to maintain upwards compatibility', correct: false }
    -
        question: 'Which PHP function retrieves a list of HTTP headers that have been sent as part of the HTTP response or are ready to be sent?'
        answers:
            - { value: 'header()', correct: false }
            - { value: 'headers()', correct: false }
            - { value: 'headers_list()', correct: true }
            - { value: 'headers_sent()', correct: false }
            - { value: 'getresponseheaders()', correct: false }
    -
        question: 'Which options do you have in PHP to set the expiry date of a session?'
        answers:
            - { value: 'Set the session.duration directive in php.ini', correct: false }
            - { value: 'Set session cookie expiry date locally via session_set_cookie_params()', correct: false }
            - { value: 'Set session expiry date locally via session_cache_expire()', correct: false }
            - { value: 'None of the above', correct: true }
    -
        question: |
                    The following form is loaded in a browser and submitted, with the checkbox activated:
                    <form method="post">
                      <input type="checkbox" name="accept" />
                    </form>
                    In the server-side PHP code to deal with the form data, what is the value of $_POST['accept'] ?
        answers:
            - { value: 'accept', correct: false }
            - { value: 'ok', correct: false }
            - { value: 'true', correct: false }
            - { value: 'on', correct: true }
    -
        question: 'When uploading a file to a PHP script using the HTTP PUT method, where would the file data be found?'
        answers:
            - { value: 'the $_FILES super-global', correct: false }
            - { value: 'the input stream php://input', correct: true }
            - { value: 'the $_POST super-global', correct: false }
            - { value: 'the global variable scope', correct: false }
    -
        question: |
                  The following form is loaded in a recent browser and submitted, with the second select option selected:
                  <form method="post">
                    <select name="list">
                      <option>one</option>
                      <option>two</option>
                      <option>three</option>
                    </select>
                  </form>
                  In the server-side PHP code to deal with the form data, what is the value of $_POST['list'] ?
        answers:
            - { value: '1', correct: false }
            - { value: '2', correct: false }
            - { value: 'two', correct: true }
            - { value: 'null', correct: false }
    -
        question: 'Which of the following is NOT a requirement for file uploads to work?'
        answers:
            - { value: 'The PHP directive file_uploads must be set to On', correct: false }
            - { value: "The form's method attribute must be set to 'post'", correct: false }
            - { value: 'The form must include a hidden input element with the name set to "MAX_FILE_SIZE"', correct: true }
            - { value: "The form's enctype attribute must be set to 'multipart/form-data'", correct: false }
    -
        question: |
                    An HTML form contains this form element:
                    <input type="image" name="myImage" src="image.png" /> The user clicks on the image to submit the form.
                    How can you now access the relative coordinates of the mouse click?
        answers:
            - { value: "$_FILES['myImage']['x'] and $_FILES['myImage']['y']", correct: false }
            - { value: "$_POST['myImage']['x'] and $_POST['myImage']['y']", correct: false }
            - { value: "$_POST['myImage.x'] and $_POST['myImage.y']", correct: false }
            - { value: "$_POST['myImage_x'] and $_POST['myImage_y']", correct: true }
    -
        question: |
                    (Type the answer) What is the output of the following code?
                    function increment ($val)
                    {
                      $_GET['m'] = (int) $_GET['m'] + 1;
                    }
                    $_GET['m'] = 1;
                    echo $_GET['m'];
        answers:
            - { value: 1, correct: true }
            - { value: 2, correct: false }
            - { value: 'Fatal Error', correct: false }
    -
        question: |
                    (Type the answer) Please provide the value of the $code variable in the following statement to set an HTTP status code that
                    signifies that the requested resource was not found.
                    http_response_code($code);
        answers:
            - { value: "404, 404 Not Found", correct: true }
            - { value: "200, 200 OK", correct: true }
            - { value: "301, 301 Moved", correct: true }
    -
        question: '(Type the answer) Please provide the name of the super-global variable where all the information about cookies is available.'
        answers:
            - { value: '$_COOKIE, $_COOKIE[], _COOKIE, _COOKIE[]', correct: true }
            - { value: '$_SERVER, $_SERVER[], _SERVER, _SERVER[]', correct: false }
            - { value: '$_SESSION, $_SESSION[], _SESSION, _SESSION[]', correct: false }
    -
        question: '(Type the answer) Which PHP function sets a cookie whose value does not get URL encoded when sending it to the browser?'
        answers:
            - { value: 'setrawcookie, setrawcookie()', correct: true }
            - { value: 'set_raw_cookie, set_raw_cookie()', correct: false }
            - { value: 'rawcookie, rawcookie()', correct: false }
    -
        question: '(Type the answer) Which PHP function sets a cookie and URL encodes its value when sending it to the browser?'
        answers:
            - { value: 'setcookie, setcookie()', correct: true }
            - { value: 'set_cookie, set_cookie()', correct: false }
            - { value: 'cookie, cookie()', correct: false }
